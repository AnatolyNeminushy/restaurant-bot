/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: –≤–∏—Ç—Ä–∏–Ω–∞, –∫–æ—Ä–∑–∏–Ω–∞ –∏ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.
 * –°–æ–¥–µ—Ä–∂–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–µ—Ç–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏/—Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –∏ –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç.
 */
const { userCarts, getCartTotal, clearCart } = require("../order_cart/cart");
const { startFeedback } = require("./feedbackHandler");
const { getMenu } = require("../data/menu");
const dayjs = require("dayjs");
const timezone = require("dayjs/plugin/timezone");
const utc = require("dayjs/plugin/utc");
dayjs.extend(utc);
dayjs.extend(timezone);

/**
 * –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.
 * –ö–ª—é—á ‚Äî Telegram userId, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —à–∞–≥ –º–∞—Å—Ç–µ—Ä–∞ –∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
 */
const userStates = new Map();
const ordersGroupId = process.env.GROUP_ORDER_APPL;

/**
 * –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (–≤—Ä–µ–º—è –¥–∞–Ω–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç–∞–π–º-–∑–æ–Ω–µ).
 */
const OPEN_HOURS = {
  0: ["09:00", "23:00"], // Sunday
  1: ["09:00", "23:00"],
  2: ["09:00", "23:00"],
  3: ["09:00", "23:00"],
  4: ["09:00", "00:00"],
  5: ["09:00", "00:00"],
  6: ["09:00", "23:00"], // Saturday
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–∫—Ä—ã—Ç –ª–∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç.
 */
function isRestaurantOpenNow() {
  const now = dayjs().tz("Asia/Yekaterinburg");
  const day = now.day();
  const [start, end] = OPEN_HOURS[day];
  const startTime = dayjs.tz(
    `${now.format("YYYY-MM-DD")} ${start}`,
    "Asia/Yekaterinburg"
  );
  let endTime = dayjs.tz(
    `${now.format("YYYY-MM-DD")} ${end}`,
    "Asia/Yekaterinburg"
  );
  if (end === "00:00") endTime = endTime.add(1, "day");
  return now.isAfter(startTime) && now.isBefore(endTime);
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ –¥–µ—Å–µ—Ä—Ç—ã (—Ç–æ—Ä—Ç—ã).
 */
function isCakeInCart(cart) {
  const menu = getMenu();
  return Object.values(cart).some((item) => {
    const fullDish = menu.find((d) => d.id === item.dish.id);
    return fullDish && fullDish.category?.toLowerCase().includes("—Ç–æ—Ä—Ç");
  });
}

// === –í—Å—è –ª–æ–≥–∏–∫–∞ —à–∞–≥–æ–≤ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚Äî –≤–æ—Ç —Ç—É—Ç ===
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Ç–µ—Ä–µ –∑–∞–∫–∞–∑–∞.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —á–∞—Å—Ç—å—é —Å—Ü–µ–Ω–∞—Ä–∏—è.
 */
async function handleOrderStep(ctx) {
  if (ctx.chat.type !== "private") return;
  const userId = ctx.from.id;
  if (!userStates.has(userId)) return;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞
  const { operatorChatUsers } = require("./operatorChat");
  if (operatorChatUsers.get(userId)) return;

  const state = userStates.get(userId);
  const text = ctx.message.text.trim();

  switch (state.step) {
    case "name":
      state.name = text;
      state.step = "phone";
      await ctx.reply("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79999999999):");
      break;

    case "phone": {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
      const cleaned = text.replace(/[^\d]/g, "");
      // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º: 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ 7,8,9
      const phoneRegex = /^(?:7|8|9)\d{9,10}$/;
      if (!phoneRegex.test(cleaned)) {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 79123456789"
        );
        return;
      }
      // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É –≤–∏–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä +7...
      let normalized = cleaned;
      if (normalized.startsWith("8")) normalized = "7" + normalized.slice(1);
      if (normalized.startsWith("9")) normalized = "7" + normalized;
      state.phone = "+".concat(normalized); // –î–ª—è —Å–µ–±—è –∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
      state.step = "delivery_type";
      await ctx.reply("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üöó –î–æ—Å—Ç–∞–≤–∫–∞",
                callback_data: "delivery_type_delivery",
              },
            ],
            [{ text: "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data: "delivery_type_pickup" }],
          ],
        },
      });
      break;
    }
    case "comment":
      state.comment = text;
      await finalizeOrder(ctx, state);
      break;

    case "address":
      state.address = text;
      state.step = "delivery_speed";
      await ctx.reply("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ",
                callback_data: "delivery_fast",
              },
            ],
            [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
          ],
        },
      });
      break;

    case "pickup_address":
      state.pickupAddress = text;
      state.step = "delivery_speed";
      await ctx.reply("‚è± –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑?", {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ",
                callback_data: "delivery_fast",
              },
            ],
            [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
          ],
        },
      });
      break;

    case "date": {
      // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É —Å –≥–æ–¥–æ–º –∏–ª–∏ –±–µ–∑ –≥–æ–¥–∞
      let userDate;
      if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
        // –§–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì
        userDate = dayjs(text, "DD.MM.YYYY").tz("Asia/Yekaterinburg");
      } else if (/^\d{2}\.\d{2}$/.test(text)) {
        // –§–æ—Ä–º–∞—Ç –î–î.–ú–ú (–±–µ–∑ –≥–æ–¥–∞)
        const year = dayjs().year();
        userDate = dayjs(`${text}.${year}`, "DD.MM.YYYY").tz(
          "Asia/Yekaterinburg"
        );
      } else {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 06.06 –∏–ª–∏ 06.06.2024"
        );
        return;
      }

      const now = dayjs().tz("Asia/Yekaterinburg").startOf("day");
      const minCakeDate = now.add(2, "day");

      if (
        isCakeInCart(userStates.get(userId).order.items) &&
        userDate.isBefore(minCakeDate)
      ) {
        const suggested = minCakeDate.format("DD.MM.YYYY");
        await ctx.reply(
          `üéÇ –¢–æ—Ä—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ 2 –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ ${suggested}`
        );
        return;
      }

      state.date = userDate.format("DD.MM.YYYY");
      state.step = "time";
      await ctx.reply("‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):");
      break;
    }

    case "time":
      state.time = text;
      state.step = "comment";
      await ctx.reply(
        "üí¨ –ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù:"
      );
      break;

    default:
      await ctx.reply("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.");
  }

  userStates.set(userId, state);
}

async function finalizeOrder(ctx, state) {
  const userId = ctx.from.id;
  let message = `üè† *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑* (@${
    ctx.from.username || "–±–µ–∑ username"
  })\n\n`;
  message += `üë§ *–ò–º—è:* ${state.name}\n`;
  message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${state.phone}\n`;
  message += `üöö *–¢–∏–ø:* ${state.deliveryType}\n`;
  message += `üìÖ *–î–∞—Ç–∞:* ${state.date}\n`;
  message += `‚è∞ *–í—Ä–µ–º—è:* ${state.time}\n`;
  if (state.deliveryType === "–î–æ—Å—Ç–∞–≤–∫–∞") {
    message += `üìç *–ê–¥—Ä–µ—Å:* ${state.address}\n`;
  } else {
    message += `üè™ *–°–∞–º–æ–≤—ã–≤–æ–∑:* ${state.pickupAddress}\n`;
  }
  message += `\nüõí *–ó–∞–∫–∞–∑:*\n`;
  for (const id in state.order.items) {
    const item = state.order.items[id];
    message += `‚Ä¢ ${item.dish.title} ‚Äî ${item.quantity} —à—Ç. ‚Äî ${
      item.dish.price * item.quantity
    }‚ÇΩ\n`;
  }
  message += `\nüí∞ *–ò—Ç–æ–≥–æ:* ${state.order.total}‚ÇΩ`;

  if (state.comment && state.comment.toLowerCase() !== "–Ω–µ—Ç") {
    message += `\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${state.comment}`;
  }

  try {
    await ctx.reply(
      `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n${message}\n\nüçΩ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑! –û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.`,
      { parse_mode: "Markdown" }
    );
    await ctx.telegram.sendMessage(ordersGroupId, message, {
      parse_mode: "Markdown",
    });
    startFeedback(ctx, userId);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:", err);
  }

  clearCart(userId);
  userStates.delete(userId);
}

// ==== –í—Å–µ action (callback_query) —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π –∫–∞–∫ —Ä–∞–Ω—å—à–µ ====
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.
 */
function registerOrderHandler(bot) {
  bot.action("cart_checkout", async (ctx) => {
    const userId = ctx.from.id;
    const cart = userCarts[userId] || {};
    const total = getCartTotal(userId);

    if (!Object.keys(cart).length) {
      await ctx.answerCbQuery("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", { show_alert: true });
      return;
    }

    await ctx.answerCbQuery();
    await ctx.reply(
      "üçΩ –ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ü•§ –ù–∞–ø–∏—Ç–∫–∏", callback_data: "category_drinks" }],
            [{ text: "ü•ó –°–∞–ª–∞—Ç—ã", callback_data: "category_salads" }],
            [{ text: "üçü –ó–∞–∫—É—Å–∫–∏", callback_data: "category_snacks" }],
            
            [{ text: "üßæ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data: "start_order" }],
          ],
        },
      }
    );
  });

  bot.action("start_order", async (ctx) => {
    const userId = ctx.from.id;
    const cart = userCarts[userId] || {};
    const total = getCartTotal(userId);

    userStates.set(userId, {
      step: "name",
      order: {
        items: cart,
        total,
      },
    });
    await ctx.answerCbQuery();
    await ctx.reply("üìù –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
  });

  bot.action(/^delivery_type_(.+)$/, async (ctx) => {
    const type = ctx.match[1];
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    state.deliveryType = type === "delivery" ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–≤–æ–∑";

    if (state.deliveryType === "–î–æ—Å—Ç–∞–≤–∫–∞") {
      state.step = "address";
      await ctx.answerCbQuery();
      await ctx.reply("üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:");
    } else {
      state.step = "pickup_location";
      await ctx.answerCbQuery();
      await ctx.reply("üè† –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "—É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87", callback_data: "pickup_1" }],
            [{ text: "—É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞", callback_data: "pickup_2" }],
            [{ text: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140", callback_data: "pickup_3" }],
          ],
        },
      });
    }
    userStates.set(userId, state);
  });

  bot.action(/^pickup_(\d)$/, async (ctx) => {
    const map = {
      1: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87",
      2: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞",
      3: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140",
    };
    const index = ctx.match[1];
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    state.pickupAddress = map[index];

    const open = isRestaurantOpenNow();
    const now = dayjs().tz("Asia/Yekaterinburg");

    if (!open) {
      
      await ctx.answerCbQuery();
      await ctx.reply(
        `‚ùå –°–µ–π—á–∞—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç. –°–∞–º–æ–≤—ã–≤–æ–∑ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
            ],
          },
        }
      );
      return;
    }

    state.step = "delivery_speed";
    await ctx.answerCbQuery();
    await ctx.reply("‚è± –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", callback_data: "delivery_fast" }],
          [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
        ],
      },
    });
    userStates.set(userId, state);
  });

  bot.action("delivery_fast", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    const now = dayjs().tz("Europe/Samara");
    const open = isRestaurantOpenNow();

    const hasCake = isCakeInCart(state.order.items);
    const suggestedDate = now.add(2, "day").format("DD.MM.YYYY");

    if (hasCake) {
      await ctx.answerCbQuery();
      await ctx.reply(
        `üéÇ –¢–æ—Ä—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ 2 –¥–Ω—è. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å ${suggestedDate}.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
            ],
          },
        }
      );
      return;
    }

    if (!open) {
      const tomorrow = now.add(1, "day").format("DD.MM.YYYY");
      await ctx.answerCbQuery();
      await ctx.reply(
        `‚ùå –°–µ–π—á–∞—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç. –ó–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ ‚Äî ${tomorrow}`
      );
      state.date = tomorrow;
      state.time = now.add(90, "minute").format("HH:mm"); // –¢–æ–∂–µ –Ω–∞ 1.5 —á–∞—Å–∞ –≤–ø–µ—Ä–µ–¥
    } else {
      state.date = now.format("DD.MM.YYYY");
      state.time = now.add(90, "minute").format("HH:mm"); // <--- –≤–æ—Ç –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º 1.5 —á–∞—Å–∞
    }

    state.step = "comment";
    await ctx.reply("üí¨ –ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù:");
    userStates.set(userId, state);
  });

  bot.action("delivery_scheduled", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    state.step = "date";
    await ctx.answerCbQuery();
    await ctx.reply("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025):");
    userStates.set(userId, state);
  });
}

module.exports = {
  userStates,
  handleOrderStep,
  registerOrderHandler, // (–¥–ª—è action/callback_query)
};
