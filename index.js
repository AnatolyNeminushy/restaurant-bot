// –í–µ—Ä—Å–∏—è 2.0

require('dotenv-flow').config();

const { Telegraf, Context } = require("telegraf");
const express = require("express");
const cors = require("cors");

// ‚úÖ –ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø—É–ª–∞
const pool = require("./server/db");

const groupOrdersId = process.env.TG_GROUP_ORDERS_ID;
const groupReservesId = process.env.TG_GROUP_RESERVES_ID;

/* ===================== –ê–Ω—Ç–∏–∫—Ä–µ—à-–≥–ª–æ–±–∞–ª–∫–∏ ===================== */
process.on("unhandledRejection", (reason) => {
  console.error("UNHANDLED REJECTION:", reason);
});
process.on("uncaughtException", (err) => {
  console.error("UNCAUGHT EXCEPTION:", err);
});

/* ===================== Express API ===================== */
const app = express();
app.use(cors());
const port = 5000;

// ‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
pool
  .query("SELECT NOW()")
  .then((res) => console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:", res.rows[0]))
  .catch((err) => console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err));

// –•–µ–ª–ø–µ—Ä, —á—Ç–æ–±—ã –ª—é–±–æ–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –≤–∞–ª–∏–ª –ø—Ä–æ—Ü–µ—Å—Å
const asyncHandler = (fn) => (req, res, next) =>
  Promise.resolve(fn(req, res, next)).catch((e) => {
    console.error("EXPRESS ROUTE ERROR:", e);
    res.status(503).json({ error: "Temporary server error" });
  });

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –∏ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö –≤ –ë–î, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
const replyOrig = Context.prototype.reply;

Context.prototype.reply = async function (...args) {
  try {
    if (this.chat && args[0]) {
      (async () => {
        try {
          // üîπ –¥–æ–±–∞–≤–ª—è–µ–º upsert –¥–ª—è —á–∞—Ç–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π 'tg'
          await pool.query(
            `INSERT INTO chats (chat_id, platform)
             VALUES ($1, 'tg')
             ON CONFLICT (chat_id) DO UPDATE
               SET platform = COALESCE(chats.platform, EXCLUDED.platform)`,
            [this.chat.id]
          );

          // üîπ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ
          await pool.query(
            `INSERT INTO messages (chat_id, from_me, text, date)
             VALUES ($1, $2, $3, NOW())`,
            [this.chat.id, true, String(args[0])]
          );
        } catch (e) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞:", e);
        }
      })();
    }
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ override reply:", e);
  }

  return replyOrig.apply(this, args);
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
app.get(
  "/api/chats",
  asyncHandler(async (req, res) => {
    const result = await pool.query("SELECT * FROM chats ORDER BY id DESC");
    res.json(result.rows);
  })
);

// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
app.get(
  "/api/messages",
  asyncHandler(async (req, res) => {
    const { chatId } = req.query;
    const result = await pool.query(
      "SELECT * FROM messages WHERE chat_id = $1 ORDER BY date",
      [chatId]
    );
    res.json(result.rows);
  })
);

app.listen(port, () => {
  console.log(`API server running on http://localhost:${port}`);
});

// --- –í–°–ï–ì–û –ó–ê–ö–ê–ó–û–í
app.get(
  "/api/stat/orders",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`SELECT COUNT(*) FROM orders`);
    res.json({ count: Number(rows[0].count) });
  })
);

// –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ created_at)
app.get(
  "/api/stat/orders-by-created",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`
      SELECT 
        created_at::date as day, 
        COUNT(*) as count, 
        SUM(total) as sum
      FROM orders
      GROUP BY day 
      ORDER BY day DESC 
      LIMIT 14
    `);
    res.json(rows);
  })
);

// --- –í–°–ï–ì–û –ë–†–û–ù–ò–†–û–í–ê–ù–ò–ô
app.get(
  "/api/stat/reserves",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`SELECT COUNT(*) FROM reservations`);
    res.json({ count: Number(rows[0].count) });
  })
);

// --- –°–£–ú–ú–ê –ó–ê–ö–ê–ó–û–í
app.get(
  "/api/stat/orders-sum",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`SELECT SUM(total) as sum FROM orders`);
    res.json({ sum: Number(rows[0].sum) || 0 });
  })
);

// --- –ì–†–ê–§–ò–ö: –ó–ê–ö–ê–ó–´ –ü–û –î–ù–Ø–ú
app.get(
  "/api/stat/orders-by-day",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`
      SELECT 
        date::date as day, 
        COUNT(*) as count, 
        SUM(total) as sum
      FROM orders
      GROUP BY day 
      ORDER BY day DESC 
      LIMIT 14
    `);
    res.json(rows);
  })
);

// --- –°–†–ï–î–ù–ò–ô –ß–ï–ö, –ú–ê–ö–°–ò–ú–£–ú –ó–ê –î–ï–ù–¨
app.get(
  "/api/stat/orders-extra",
  asyncHandler(async (req, res) => {
    const { rows } = await pool.query(`
      SELECT total, date::date as day
      FROM orders
    `);
    const totals = rows.map((r) => Number(r.total) || 0);
    const avg = totals.length
      ? totals.reduce((a, b) => a + b, 0) / totals.length
      : 0;

    const byDay = {};
    rows.forEach((r) => {
      const day = r.day;
      const total = Number(r.total) || 0;
      byDay[day] = Math.max(byDay[day] || 0, total);
    });
    const maxDay = Object.values(byDay).length
      ? Math.max(...Object.values(byDay))
      : 0;

    res.json({ avg: Math.round(avg), maxDay });
  })
);

/* ===================== Telegraf Bot ===================== */

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω—é

const { loadMenu, getMenu } = require("./data/menu");
const registerMainHandlers = require("./handlers/main");
const registerOrderHandlers = require("./handlers/order");
const registerOperatorHandler = require("./handlers/operator");
const { registerFeedbackHandler } = require("./handlers/feedbackHandler");
const { registerMessageHandler } = require("./middlewares/message");
const {
  attachOrderGuard,
  markOrderExitForLoggers,
  registerOrderHandler,
} = require("./middlewares/orderHandler");
const {
  registerOperatorChat,
  setMenuCache,
  startOperatorChat,
} = require("./middlewares/operatorChat");
const {
  registerReserveHandler,
  attachReservationGuard,
  markReserveExitForLoggers,
} = require("./middlewares/reserveHandler");
const cart = require("./order_cart/cart");
const { attachPolicyHandlers } = require("./utils/policyHandler");

const bot = new Telegraf(process.env.BOT_TOKEN);

// –õ–æ–≤–∏–º –ª—é–±—ã–µ –æ—à–∏–±–∫–∏ –≤–Ω—É—Ç—Ä–∏ Telegraf-–º–∏–¥–ª–≤–∞—Ä–µ–π/—Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
bot.catch((err, ctx) => {
  console.error("TELEGRAF ERROR at", ctx?.updateType, err);
});

// ====== –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ë–î (message) ======
bot.on("message", async (ctx, next) => {
  // –ü–∏—à–µ–º –≤ –ë–î –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
  (async () => {
    try {
      const from = ctx.from || {};
      const text = ctx.message?.text || "";

      await pool.query(
        `INSERT INTO chats (chat_id, platform, username, first_name, last_name)
   VALUES ($1, 'tg', $2, $3, $4)
   ON CONFLICT (chat_id) DO UPDATE
     SET platform   = COALESCE(chats.platform, EXCLUDED.platform),
         username   = EXCLUDED.username,
         first_name = EXCLUDED.first_name,
         last_name  = EXCLUDED.last_name`,
        [
          from.id,
          from.username || null,
          from.first_name || null,
          from.last_name || null,
        ]
      );

      await pool.query(
        `INSERT INTO messages (chat_id, from_me, text, date)
         VALUES ($1, $2, $3, NOW())`,
        [from.id, false, text]
      );

      console.log("–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", from.id, from.username, text);
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Ç–∞/—Å–æ–æ–±—â–µ–Ω–∏—è:", e);
    }
  })();

  if (typeof next === "function") return next(); // –≤–∞–∂–Ω–æ!
});

// ====== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏ ======
bot.on("callback_query", async (ctx, next) => {
  // 0) –°—Ä–∞–∑—É —É–±—Ä–∞—Ç—å ¬´—á–∞—Å–∏–∫–∏¬ª, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–≤–∏—Ç—å 400: query is too old
  try {
    await ctx.answerCbQuery(); // –º–æ–∂–Ω–æ —Ç–µ–∫—Å—Ç: await ctx.answerCbQuery('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...');
  } catch (e) {
    console.error("answerCbQuery error:", e?.description || e);
  }

  // 1) –õ—ë–≥–∫–∏–π –ª–æ–≥ (–±–µ–∑ –ø–∞–¥–µ–Ω–∏–π)
  try {
    console.log(
      "–ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò:",
      ctx.from?.id,
      ctx.from?.username,
      ctx.callbackQuery?.data
    );
  } catch (e) {
    console.error("callback log error:", e);
  }

  // 2) –ü–∏—à–µ–º –≤ –ë–î –≤ —Ñ–æ–Ω–µ
  (async () => {
    try {
      await pool.query(
        `INSERT INTO chats (chat_id, platform, username, first_name, last_name)
   VALUES ($1, 'tg', $2, $3, $4)
   ON CONFLICT (chat_id) DO UPDATE
     SET platform   = COALESCE(chats.platform, EXCLUDED.platform),
         username   = EXCLUDED.username,
         first_name = EXCLUDED.first_name,
         last_name  = EXCLUDED.last_name`,
        [
          ctx.from?.id,
          ctx.from?.username || null,
          ctx.from?.first_name || null,
          ctx.from?.last_name || null,
        ]
      );

      // ==== –ò—â–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ callback_data ====
      let buttonText = `[button] ${ctx.callbackQuery?.data}`;
      const allRows =
        ctx.callbackQuery?.message?.reply_markup?.inline_keyboard || [];
      for (const row of allRows) {
        for (const btn of row) {
          if (btn.callback_data === ctx.callbackQuery?.data) {
            buttonText = btn.text;
          }
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–∞–∫ ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ¬ª (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
      await pool.query(
        `INSERT INTO messages (chat_id, from_me, text, date)
         VALUES ($1, $2, $3, NOW())`,
        [ctx.from?.id, false, buttonText]
      );
    } catch (e) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ callback_query:", e);
    }
  })();

  if (typeof next === "function") return next();
});

(async () => {
  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é
    await loadMenu();
    console.log("‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ");

    // –ö—ç—à –º–µ–Ω—é –¥–ª—è –ò–ò
    const menuText = getMenu()
      .map((item) => `${item.title} ‚Äî ${item.description || ""}`)
      .join("\n");
    setMenuCache(menuText);

    // –ö–æ–º–∞–Ω–¥—ã
    bot.command("cart", async (ctx) => {
      try {
        await cart.showCart(ctx);
      } catch (e) {
        console.error("cart.showCart error:", e);
        try {
          await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã.");
        } catch (e2) {
          console.error("reply error:", e2);
        }
      }
    });

    bot.command("operator", (ctx) => {
      try {
        const userId = ctx.from?.id;
        if (userId) startOperatorChat(userId);
        ctx.reply("–í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.");
      } catch (e) {
        console.error("operator command error:", e);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    // ===== 1) –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–∞—Ä–¥—ã –°–ê–ú–´–ï –ü–ï–†–í–´–ï =====
    attachReservationGuard(bot); // –±—Ä–æ–Ω—å: –ª–æ–≤–∏—Ç /–∫–æ–º–∞–Ω–¥—ã –∏ "—á—É–∂–∏–µ" –∫–Ω–æ–ø–∫–∏
    markReserveExitForLoggers(bot); // —Ç–æ–ª—å–∫–æ –ø–æ–º–µ—Ç–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤, –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç

    attachOrderGuard(bot); // –∑–∞–∫–∞–∑: –ª–æ–≤–∏—Ç /–∫–æ–º–∞–Ω–¥—ã –∏ "—á—É–∂–∏–µ" –∫–Ω–æ–ø–∫–∏
    markOrderExitForLoggers(bot); // –ø–æ–º–µ—Ç–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤

    // ===== 2) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π, —á—å–∏ action/command –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≥–∞—Ä–¥–æ–≤ =====
    registerReserveHandler(bot); // reserve_* action'—ã, —à–∞–≥–æ–≤–∏–∫ –±—Ä–æ–Ω–∏
    registerOrderHandlers(bot); // action'—ã –∑–∞–∫–∞–∑–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ç.–ø.)
    registerOrderHandler(bot); // wizard –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)

    // ===== 3) –û–ø–µ—Ä–∞—Ç–æ—Ä ‚Äî –¥–æ –æ–±—â–∏—Ö, –∏–Ω–∞—á–µ –æ–±—â–∏–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—è—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    registerOperatorChat(bot);
    registerOperatorHandler(bot);

    // ===== 4) –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è/–º–µ–Ω—é/–∫–æ–º–∞–Ω–¥—ã
    registerMainHandlers(bot);

    // ===== 5) –ö–æ—Ä–∑–∏–Ω–∞ –∏ –ø—Ä–æ—á–µ–µ
    cart.registerCartHandlers(bot);
    registerFeedbackHandler(bot);
    attachPolicyHandlers(bot);

    // ===== 6) –°–∞–º—ã–π –æ–±—â–∏–π ¬´–ø–æ–π–º–∞–π –≤—Å—ë¬ª
    registerMessageHandler(bot);

    console.log("‚úÖ –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await bot.launch();
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
    logger.info("bot_started", { meta: { pid: process.pid } });
    // –ì—Ä–∞—Ü–∏–æ–∑–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
    const stop = async () => {
      try {
        console.log("‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞...");
        await bot.stop("SIGTERM");
        process.exit(0);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞:", e);
        process.exit(1);
      }
    };
    process.once("SIGINT", stop);
    process.once("SIGTERM", stop);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø—É—Å–∫–∞:", err.stack || err);
  }
})();
