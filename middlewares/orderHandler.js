// orderHandler.js
const { userCarts, getCartTotal, clearCart } = require("../order_cart/cart");
const { startFeedback } = require("../handlers/feedbackHandler");
const { getMenu } = require("../data/menu");

const dayjs = require("dayjs");
const utc = require("dayjs/plugin/utc"); // –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è timezone
const timezone = require("dayjs/plugin/timezone");
const customParseFormat = require("dayjs/plugin/customParseFormat");
dayjs.extend(utc);
dayjs.extend(timezone);
dayjs.extend(customParseFormat);

const pool = require("../server/db");

const userStates = new Map();
const ordersGroupId = process.env.GROUP_ORDER_APPL;

/** ================== –í–†–ï–ú–Ø / –ß–ê–°–´ –†–ê–ë–û–¢–´ ================== */
const TZ = "Asia/Yekaterinburg";
const MIN_READY_MIN = 60; // –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞
const SLOT_MIN = 5; // –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 5 –º–∏–Ω—É—Ç

const OPEN_HOURS = {
  0: ["09:00", "23:00"], // Sunday
  1: ["09:00", "23:00"],
  2: ["09:00", "23:00"],
  3: ["09:00", "23:00"],
  4: ["09:00", "00:00"],
  5: ["09:00", "00:00"],
  6: ["09:00", "23:00"], // Saturday
};

// —Ç–µ–∫—É—â–µ–µ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤ –µ–¥–∏–Ω–æ–π TZ
const now = () => dayjs().tz(TZ);

// –ø–∞—Ä—Å —Å—Ç—Ä–æ–∫–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ TZ
const tzParse = (str, fmt) => dayjs.tz(str, fmt, TZ);
const canPayByCard = (state) => state?.deliveryType === "–°–∞–º–æ–≤—ã–≤–æ–∑";

// –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö –¥–æ –±–ª–∏–∂–∞–π—à–∏—Ö SLOT_MIN –º–∏–Ω—É—Ç
function roundUpToSlot(d, slot = SLOT_MIN) {
  const m = d.minute();
  const r = Math.ceil(m / slot) * slot;
  return d.minute(r).second(0);
}

// –ø—Ä–∏–∂–∏–º–∞–µ–º –≤—Ä–µ–º—è –∫ —á–∞—Å–∞–º —Ä–∞–±–æ—Ç—ã
function clampToOpenHours(d) {
  const dayIdx = d.day(); // 0..6
  const [start, end] = OPEN_HOURS[dayIdx];

  const open = tzParse(
    `${d.format("YYYY-MM-DD")} ${start}`,
    "YYYY-MM-DD HH:mm"
  );
  let close = tzParse(`${d.format("YYYY-MM-DD")} ${end}`, "YYYY-MM-DD HH:mm");
  if (end === "00:00") close = close.add(1, "day"); // –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É–Ω–æ—á–∏

  if (d.isBefore(open)) return open;
  if (d.isAfter(close)) {
    // –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é
    const next = d.add(1, "day");
    const [nStart] = OPEN_HOURS[next.day()];
    return tzParse(
      `${next.format("YYYY-MM-DD")} ${nStart}`,
      "YYYY-MM-DD HH:mm"
    );
  }
  return d;
}

// ¬´–∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ¬ª = —Å–µ–π—á–∞—Å + 90 –º–∏–Ω—É—Ç (—Å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º –∏ —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã)
function getEarliestReady() {
  let t = now().add(MIN_READY_MIN, "minute");
  t = roundUpToSlot(t);
  t = clampToOpenHours(t);
  return t;
}

function isRestaurantOpenNow() {
  const t = now();
  const [start, end] = OPEN_HOURS[t.day()];
  const startTime = tzParse(
    `${t.format("YYYY-MM-DD")} ${start}`,
    "YYYY-MM-DD HH:mm"
  );
  let endTime = tzParse(`${t.format("YYYY-MM-DD")} ${end}`, "YYYY-MM-DD HH:mm");
  if (end === "00:00") endTime = endTime.add(1, "day");
  return t.isAfter(startTime) && t.isBefore(endTime);
}

/** –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ç–æ–ª—å–∫–æ —Ç–æ—Ä—Ç—ã (–∏ –Ω–∏—á–µ–≥–æ –∫—Ä–æ–º–µ —Ç–æ—Ä—Ç–æ–≤) */
function isOnlyCakeInCart(cart) {
  const menu = getMenu();
  const items = Object.values(cart);
  if (!items.length) return false; // –ø—É—Å—Ç–∞—è –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è
  return items.every((item) => {
    const fullDish = menu.find((d) => d.id === item.dish.id);
    return fullDish && fullDish.category?.toLowerCase().includes("—Ç–æ—Ä—Ç");
  });
}

/** ================== –£–¢–ò–õ–ò–¢–´ –°–ï–°–°–ò–ò –ó–ê–ö–ê–ó–ê ================== */
function endOrderSession(userId) {
  userStates.delete(userId);
}

function isOrderCallback(data) {
  // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ callback-–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞
  return (
    data === "cart_checkout" ||
    data === "start_order" ||
    data === "delivery_fast" ||
    data === "delivery_scheduled" ||
    data === "payment_card" ||
    data === "payment_cash" ||
    /^delivery_type_/.test(data) ||
    /^pickup_\d$/.test(data) ||
    /^operator_call_(yes|no)$/.test(data)
  );
}

/** ================== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ì–ê–†–î–´ ================== */
/**
 * –°–¢–ê–í–¨ –ü–ï–†–í–´–ú middleware:
 * - –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ ("/...") –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –∑–∞–∫–∞–∑–∞ => –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ + –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ (–∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è —Å—Ä–∞–∑—É)
 * - –õ—é–±–æ–π "—á—É–∂–æ–π" callback (–Ω–µ –∏–∑ isOrderCallback) => –≤—ã—Ö–æ–¥ –∏–∑ –∑–∞–∫–∞–∑–∞ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
 * - –¢–µ–∫—Å—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Å–µ—Å—Å–∏–∏ ‚Äî –ø–µ—Ä–µ–¥–∞—ë–º –≤ handleOrderStep; –µ—Å–ª–∏ –æ–Ω –≤–µ—Ä–Ω—É–ª false, —Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è
 */
function attachOrderGuard(bot) {
  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId || !userStates.has(userId)) {
      return next();
    }

    // "–ß—É–∂–æ–π" callback -> –≤—ã—Ö–æ–¥–∏–º –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    if (ctx.updateType === "callback_query") {
      const data = ctx.callbackQuery?.data || "";
      if (!isOrderCallback(data)) {
        endOrderSession(userId);
        ctx.state = ctx.state || {};
        ctx.state.__order_exited = "callback";
        await ctx.answerCbQuery().catch(() => {});
        return next();
      }
      return next(); // –Ω–∞—à order-callback, –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—è –Ω–∏–∂–µ
    }

    // –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ -> —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º –∏ –¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º
    if (ctx.message?.text?.startsWith("/")) {
      endOrderSession(userId);
      ctx.state = ctx.state || {};
      ctx.state.__order_exited = "command";
      return next();
    }

    // ---- –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ú–ï–°–¢–û ----
    // –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–¥–∞—ë–º –≤–∏–∑–∞—Ä–¥—É. –ï—Å–ª–∏ –æ–Ω –æ–±—Ä–∞–±–æ—Ç–∞–ª (true) ‚Äî –ù–ò–ö–û–ì–û –¥–∞–ª—å—à–µ –Ω–µ –∑–æ–≤—ë–º.
    const handled = await handleOrderStep(ctx);
    if (handled) {
      return; // <‚Äî –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º next(), —á—Ç–æ–±—ã —Ç–æ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ—à–ª–æ –≤–æ –≤—Ç–æ—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    }

    // –ï—Å–ª–∏ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    endOrderSession(userId);
    ctx.state = ctx.state || {};
    ctx.state.__order_exited = "text";
    return next();
  });
}

/**
 * –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É. –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ—Ç –∞–ø–¥–µ–π—Ç, —á—Ç–æ–±—ã –≤–Ω–µ—à–Ω–∏–µ –ª–æ–≥–≥–µ—Ä—ã/—Ö—Ä–∞–Ω–∏–ª–∏—â–∞
 * –º–æ–≥–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ ¬´–ª–æ–≥–∞—Ö –∑–∞–∫–∞–∑–∞¬ª.
 */
function markOrderExitForLoggers(bot) {
  bot.use(async (ctx, next) => {
    if (ctx.state?.__order_exited) {
      ctx.state.__suppressOrderLogging = true;
    }
    return next();
  });
}

/** ================== –û–°–ù–û–í–ù–û–ô WIZARD –û–§–û–†–ú–õ–ï–ù–ò–Ø ================== */
async function handleOrderStep(ctx) {
  if (ctx.chat.type !== "private") return false;
  const userId = ctx.from.id;
  if (!userStates.has(userId)) return false;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º ‚Äî —Å—Ä–∞–∑—É –≤—ã–π—Ç–∏ –∏–∑ –∑–∞–∫–∞–∑–∞
  try {
    const { operatorChatUsers } = require("./operatorChat");
    if (operatorChatUsers.get(userId)) return false;
  } catch (_) {}

  const state = userStates.get(userId);
  const text = (ctx.message?.text || "").trim();

  switch (state.step) {
    case "name":
      state.name = text;
      state.step = "phone";
      await ctx.reply("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79999999999):");
      break;

    case "phone": {
      const cleaned = text.replace(/[^\d]/g, "");
      const phoneRegex = /^(?:7|8|9)\d{9,10}$/;
      if (!phoneRegex.test(cleaned)) {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 79123456789"
        );
        return true;
      }
      let normalized = cleaned;
      if (normalized.startsWith("8")) normalized = "7" + normalized.slice(1);
      if (normalized.startsWith("9")) normalized = "7" + normalized;
      state.phone = "+".concat(normalized);
      state.step = "delivery_type";
      await ctx.reply("üöö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üöó –î–æ—Å—Ç–∞–≤–∫–∞", callback_data: "delivery_type_delivery" }],
            [{ text: "üèÉ‚Äç‚ôÇÔ∏è –°–∞–º–æ–≤—ã–≤–æ–∑", callback_data: "delivery_type_pickup" }],
          ],
        },
      });
      break;
    }

    case "comment":
      state.comment = text;
      state.step = "operator_call";
      await ctx.reply(
        "üìû –¢—Ä–µ–±—É–µ—Ç—Å—è –∑–≤–æ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?",
        {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "‚úÖ –î–∞", callback_data: "operator_call_yes" },
                { text: "‚ùå –ù–µ—Ç", callback_data: "operator_call_no" },
              ],
            ],
          },
        }
      );
      break;

    case "payment": {
      const q = text.toLowerCase();
      if (q.includes("–Ω–∞–ª–∏—á")) {
        state.paymentType = "–ù–∞–ª–∏—á–Ω—ã–µ";
        await finalizeOrder(ctx, state);
      } else if (q.includes("–∫–∞—Ä—Ç")) {
        if (!canPayByCard(state)) {
          await ctx.reply(
            "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–∏—á–Ω—ã–µ."
          );
          await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
            reply_markup: {
              inline_keyboard: [
                [{ text: "üí∂ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data: "payment_cash" }],
              ],
            },
          });
        } else {
          state.paymentType = "–ö–∞—Ä—Ç–∞";
          await finalizeOrder(ctx, state);
        }
      } else {
        await ctx.reply(
          "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ."
        );
      }
      break;
    }

    case "address":
      state.address = text;
      state.step = "delivery_speed";
      await ctx.reply("‚è± –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", callback_data: "delivery_fast" }],
            [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
          ],
        },
      });
      break;

    case "pickup_address":
      state.pickupAddress = text;
      state.step = "delivery_speed";
      await ctx.reply("‚è± –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑?", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", callback_data: "delivery_fast" }],
            [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
          ],
        },
      });
      break;

    case "date": {
      let userDate;
      if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
        userDate = tzParse(text, "DD.MM.YYYY");
      } else if (/^\d{2}\.\d{2}$/.test(text)) {
        const year = now().year();
        userDate = tzParse(`${text}.${year}`, "DD.MM.YYYY");
      } else {
        await ctx.reply(
          "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 06.06 –∏–ª–∏ 06.06.2024"
        );
        return true;
      }

      if (!userDate.isValid()) {
        await ctx.reply("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
        return true;
      }

      const minCakeDate = now().startOf("day").add(2, "day");
      // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –í–ï–°–¨ –∑–∞–∫–∞–∑ ‚Äî —Ç–æ—Ä—Ç—ã, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞—Ç—É
      if (
        isOnlyCakeInCart(state.order.items) &&
        userDate.isBefore(minCakeDate)
      ) {
        const suggested = minCakeDate.format("DD.MM.YYYY");
        await ctx.reply(
          `üéÇ –¢–æ—Ä—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ 2 –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–µ —Ä–∞–Ω—å—à–µ ${suggested}`
        );
        return true;
      }

      state.date_display = userDate.format("DD.MM.YYYY");
      state.date = userDate.format("YYYY-MM-DD");
      state.step = "time";
      await ctx.reply("‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:30):");
      break;
    }

    case "time":
      state.time = text;
      state.step = "comment";
      await ctx.reply(
        "üí¨ –ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù:"
      );
      break;

    default:
      await ctx.reply("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏.");
  }

  // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä–∫–∞: —Å–µ—Å—Å–∏—è –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞?
  if (userStates.has(userId)) {
    userStates.set(userId, state);
  }
  return true;
}

/** ================== –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø ================== */
async function finalizeOrder(ctx, state) {
  const userId = ctx.from.id;

  let message = `üè† *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ c Telegram* (@${
    ctx.from.username || "–±–µ–∑ username"
  })\n\n`;
  message += `üë§ *–ò–º—è:* ${state.name}\n`;
  message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${state.phone}\n`;
  message += `üöö *–¢–∏–ø:* ${state.deliveryType}\n`;
  message += `üìÖ *–î–∞—Ç–∞:* ${state.date_display || state.date || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}\n`;
  message += `‚è∞ *–í—Ä–µ–º—è:* ${state.time}\n`;

  if (state.deliveryType === "–î–æ—Å—Ç–∞–≤–∫–∞") {
    message += `üìç *–ê–¥—Ä–µ—Å:* ${state.address}\n`;
  } else {
    message += `üè™ *–°–∞–º–æ–≤—ã–≤–æ–∑:* ${state.pickupAddress}\n`;
  }

  message += `\nüõí *–ó–∞–∫–∞–∑:*\n`;
  for (const id in state.order.items) {
    const item = state.order.items[id];
    let title = item.dish.title;
    if (item.dish.modifier) title += ` (${item.dish.modifier})`;
    if (item.dish.noodleType) title += ` (${item.dish.noodleType})`;
    message += `‚Ä¢ ${title} ‚Äî ${item.quantity} —à—Ç. ‚Äî ${
      item.dish.price * item.quantity
    }‚ÇΩ\n`;
  }

  message += `‚Ä¢ üíº –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–±–æ—Ä ‚Äî 39‚ÇΩ\n`;
  message += `\nüí∞ *–ò—Ç–æ–≥–æ:* ${state.order.total}‚ÇΩ`;

  if (state.comment && state.comment.toLowerCase() !== "–Ω–µ—Ç") {
    message += `\n\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${state.comment}`;
  }
  message += `\nüìû *–ó–≤–æ–Ω–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:* ${
    state.operatorCall ? "–î–∞" : "–ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
  }`;
  message += `\nüíµ *–û–ø–ª–∞—Ç–∞:* ${state.paymentType || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}`;

  try {
    await ctx.reply(
      `‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n\n${message}\n\nüçΩ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–∫–∞–∑!`,
      { parse_mode: "Markdown" }
    );
    await ctx.telegram.sendMessage(ordersGroupId, message, {
      parse_mode: "Markdown",
    });

    // === –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–ö–ê–ó –í –¢–ê–ë–õ–ò–¶–£ ===
    let dbDate = null;
    if (state.date) {
      if (/^\d{4}-\d{2}-\d{2}$/.test(state.date)) {
        dbDate = state.date;
      } else if (/^\d{2}\.\d{2}\.\d{4}$/.test(state.date)) {
        const [d, m, y] = state.date.split(".");
        dbDate = `${y}-${m}-${d}`;
      } else {
        dbDate = null;
      }
    }

    await pool.query(
      `INSERT INTO orders (tg_username, name, phone, order_type, date, time, address, items, total, comment, platform, created_at)
       VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, NOW())`,
      [
        ctx.from.username || null,
        state.name,
        state.phone,
        state.deliveryType,
        dbDate,
        state.time,
        state.deliveryType === "–î–æ—Å—Ç–∞–≤–∫–∞" ? state.address : state.pickupAddress,
        JSON.stringify(state.order.items),
        state.order.total,
        state.comment || null,
        "telegram",
      ]
    );

    startFeedback(ctx, userId);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É:", err);
  }

  clearCart(userId);
  userStates.delete(userId);
}

/** ================== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ö–ù–û–ü–û–ö ================== */
function registerOrderHandler(bot) {
  // –í–ê–ñ–ù–û: —ç—Ç–∏ –¥–≤–∞ ‚Äî –ø–æ—Å—Ç–∞–≤—å –°–ê–ú–´–ú–ò –ü–ï–†–í–´–ú–ò –≤ index.js (–¥–æ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π)
  // attachOrderGuard(bot);
  // markOrderExitForLoggers(bot);

  bot.action("cart_checkout", async (ctx) => {
    const userId = ctx.from.id;
    const cart = userCarts[userId] || {};
    const total = getCartTotal(userId);

    if (!Object.keys(cart).length) {
      await ctx.answerCbQuery("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", { show_alert: true });
      return;
    }

    await ctx.answerCbQuery();
    await ctx.reply(
      "üçΩ –ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞, –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?",
      {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ü•§ –ù–∞–ø–∏—Ç–∫–∏", callback_data: "category_drinks" }],
            [{ text: "üç∞ –î–µ—Å–µ—Ä—Ç—ã", callback_data: "category_desserts" }],
            [{ text: "ü•´ –°–æ—É—Å—ã", callback_data: "category_sauces" }],
            [{ text: "üßæ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é", callback_data: "start_order" }],
          ],
        },
      }
    );
  });

  bot.action(/^operator_call_(yes|no)$/, async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;

    state.operatorCall = ctx.match[1] === "yes";
    state.step = "payment";
    await ctx.answerCbQuery();

    const inline_keyboard = canPayByCard(state)
      ? [
          [
            { text: "üí≥ –ö–∞—Ä—Ç–∞", callback_data: "payment_card" },
            { text: "üí∂ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data: "payment_cash" },
          ],
        ]
      : [[{ text: "üí∂ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data: "payment_cash" }]];

    const hint = canPayByCard(state)
      ? "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"
      : "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:";

    await ctx.reply(hint, { reply_markup: { inline_keyboard } });
    userStates.set(userId, state);
  });

  bot.action("payment_card", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;

    if (!canPayByCard(state)) {
      await ctx.answerCbQuery("–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ.", {
        show_alert: true,
      });
      // –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ª–∏—á–Ω—ã–µ
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "üí∂ –ù–∞–ª–∏—á–Ω—ã–µ", callback_data: "payment_cash" }],
          ],
        },
      });
      return;
    }

    state.paymentType = "–ö–∞—Ä—Ç–∞";
    await ctx.answerCbQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π üí≥");
    await finalizeOrder(ctx, state);
  });

  bot.action("payment_cash", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;
    state.paymentType = "–ù–∞–ª–∏—á–Ω—ã–µ";
    await ctx.answerCbQuery("–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ üíµ");
    await finalizeOrder(ctx, state);
  });

  bot.action("start_order", async (ctx) => {
    const userId = ctx.from.id;
    const cart = userCarts[userId] || {};
    const total = getCartTotal(userId);

    userStates.set(userId, {
      step: "name",
      order: { items: cart, total },
    });
    await ctx.answerCbQuery();
    await ctx.reply("üìù –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:");
  });

  bot.action(/^delivery_type_(.+)$/, async (ctx) => {
    const type = ctx.match[1];
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;
    state.deliveryType = type === "delivery" ? "–î–æ—Å—Ç–∞–≤–∫–∞" : "–°–∞–º–æ–≤—ã–≤–æ–∑";

    if (state.deliveryType === "–î–æ—Å—Ç–∞–≤–∫–∞") {
      state.step = "address";
      await ctx.answerCbQuery();
      await ctx.reply(
        "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –ø–æ–¥—ä–µ–∑–¥, –∫–≤–∞—Ä—Ç–∏—Ä—É, —ç—Ç–∞–∂ –∏ –¥–æ–º–æ—Ñ–æ–Ω (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)"
      );
    } else {
      state.step = "pickup_location";
      await ctx.answerCbQuery();
      await ctx.reply("üè† –í—ã–±–µ—Ä–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–∞–º–æ–≤—ã–≤–æ–∑–∞:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "—É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87", callback_data: "pickup_1" }],
            [{ text: "—É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞", callback_data: "pickup_2" }],
            [{ text: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140", callback_data: "pickup_3" }],
          ],
        },
      });
    }
    userStates.set(userId, state);
  });

  bot.action(/^pickup_(\d)$/, async (ctx) => {
    const map = {
      1: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87",
      2: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞",
      3: "–£–¥–º—É—Ä—Ç–∏—è, –ò–∂–µ–≤—Å–∫, —É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140",
    };
    const index = ctx.match[1];
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;
    state.pickupAddress = map[index];

    const open = isRestaurantOpenNow();

    if (!open) {
      await ctx.answerCbQuery();
      await ctx.reply(
        "‚ùå –°–µ–π—á–∞—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω –∑–∞–∫—Ä—ã—Ç. –°–∞–º–æ–≤—ã–≤–æ–∑ –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑.",
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
            ],
          },
        }
      );
      return;
    }

    state.step = "delivery_speed";
    await ctx.answerCbQuery();
    await ctx.reply("‚è± –ö–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑?", {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üöÄ –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", callback_data: "delivery_fast" }],
          [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
        ],
      },
    });
    userStates.set(userId, state);
  });

  bot.action("delivery_fast", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;
    const tNow = now();

    // –¢–æ–ª—å–∫–æ —Ç–æ—Ä—Ç—ã ‚Äî –∑–∞–ø—Ä–µ—Ç –±—ã—Å—Ç—Ä—ã—Ö
    if (isOnlyCakeInCart(state.order.items)) {
      const suggestedDate = tNow.add(2, "day").format("DD.MM.YYYY");
      await ctx.answerCbQuery();
      await ctx.reply(
        `üéÇ –¢–æ—Ä—Ç—ã –Ω—É–∂–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ 2 –¥–Ω—è. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–∑–∞–∫–∞–∑ –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∏–Ω–∞—è —Å ${suggestedDate}.`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "üìÖ –ü—Ä–µ–¥–∑–∞–∫–∞–∑", callback_data: "delivery_scheduled" }],
            ],
          },
        }
      );
      return;
    }

    // –í—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º ETA —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π —Ö–µ–ª–ø–µ—Ä
    const eta = getEarliestReady();
    state.date = eta.format("DD.MM.YYYY");
    state.time = eta.format("HH:mm");

    state.step = "comment";
    await ctx.answerCbQuery();
    await ctx.reply("üí¨ –ï—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É? –ï—Å–ª–∏ –Ω–µ—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù:");
    userStates.set(userId, state);
  });

  bot.action("delivery_scheduled", async (ctx) => {
    const userId = ctx.from.id;
    const state = userStates.get(userId);
    if (!state) return;
    state.step = "date";
    await ctx.answerCbQuery();
    await ctx.reply("üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.05.2025):");
    userStates.set(userId, state);
  });
}

module.exports = {
  userStates,
  handleOrderStep,
  registerOrderHandler,
  attachOrderGuard,
  markOrderExitForLoggers,
};
