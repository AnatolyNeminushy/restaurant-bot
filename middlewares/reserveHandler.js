/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–æ–ª–æ–≤.
 * –•—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –∏
 * –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ —Å–ª—É–∂–µ–±–Ω—ã–π —á–∞—Ç.
 */
// reserveHandler.js
const { userStates } = require("./orderHandler");
/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö –º–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 * –ö–ª—é—á ‚Äî userId, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî –æ–±—ä–µ–∫—Ç —Å —Ç–µ–∫—É—â–∏–º —à–∞–≥–æ–º –∏ –≤–≤–µ–¥—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
 */
const userReserveStates = new Map();
const reserveGroupId = process.env.GROUP_ORDER_RES || "ID_–ì–†–£–ü–ü–´";
const pool = require("../server/db");

/** ========= –£—Ç–∏–ª–∏—Ç—ã ========= */
/**
 * –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
 */
function endReservation(userId) {
  userReserveStates.delete(userId);
}
/**
 * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –º–∞—Å—Ç–µ—Ä –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
 * –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –∏–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –æ—Ç–º–µ–Ω—ã.
 */
async function cancelReservation(ctx, reason = "–°–µ—Å—Å–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.") {
  const uid = ctx.from?.id;
  if (userReserveStates.has(uid)) {
    endReservation(uid);
    await ctx.reply(`‚ùå ${reason}`);
  }
}

/** ========= –°—Ç–∞—Ä—Ç ========= */
/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
function startReservation(ctx, userId) {
  if (userStates && typeof userStates.delete === "function") {
    userStates.delete(userId);
  }
  userReserveStates.set(userId, { step: "name" });
  ctx.reply("üìù –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?");
}

/** ========= –®–∞–≥–æ–≤–∏–∫ ========= */
/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.
 */
async function handleReserveStep(ctx) {
  const userId = ctx.from.id;
  if (!userReserveStates.has(userId)) return false;

  const state = userReserveStates.get(userId);
  const text = (ctx.message?.text || "").trim();

  switch (state.step) {
    case "name":
      state.name = text;
      state.step = "phone";
      await ctx.reply("üìû –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 79999999999):");
      break;

    case "phone":
      if (!/^7\d{10}$/.test(text)) {
        await ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79999999999");
        return true;
      }
      state.phone = text;
      state.step = "address";
      await ctx.reply("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –¥–ª—è –±—Ä–æ–Ω–∏:", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "—É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87", callback_data: "reserve_address_1" }],
            [{ text: "—É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞", callback_data: "reserve_address_2" }],
            [{ text: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140", callback_data: "reserve_address_3" }],
          ],
        },
      });
      break;

    case "date":
      if (!/^\d{4}-\d{2}-\d{2}$/.test(text)) {
        await ctx.reply(
          "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-13):",
          { reply_markup: { inline_keyboard: getNext7DaysKeyboard() } }
        );
        return true;
      }
      state.date = text;
      state.step = "guests";
      await ctx.reply("üë• –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–ª–∏–∫?");
      break;

    case "guests":
      if (!/^\d{1,2}$/.test(text) || Number(text) < 1 || Number(text) > 30) {
        await ctx.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≥–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2):");
        return true;
      }
      state.guests = text;
      state.step = "time";
      await ctx.reply("‚è∞ –ö –∫–∞–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–æ–π—Ç–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 18:00)");
      break;

    case "time":
      state.time = text;
      state.step = "comment";
      await ctx.reply("üí¨ –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ ‚Äú–Ω–µ—Ç‚Äù):");
      break;

    case "comment":
      state.comment = text;
      await finalizeReservation(ctx, state);
      endReservation(userId);
      break;
  }

  if (userReserveStates.has(userId)) {
    userReserveStates.set(userId, state);
  }
  return true;
}

/** ========= –î–∞—Ç—ã ========= */
/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±–ª–∏–∂–∞–π—à–∏–º–∏ —Å–µ–º—å—é –¥–∞—Ç–∞–º–∏.
 */
function getNext7DaysKeyboard() {
  const days = [];
  const today = new Date();
  for (let i = 0; i < 7; i++) {
    const d = new Date(today);
    d.setDate(today.getDate() + i);
    const label = d.toLocaleDateString("ru-RU", { day: "2-digit", month: "2-digit" });
    const value = d.toISOString().split("T")[0];
    days.push([{ text: label, callback_data: `reserve_date_${value}` }]);
  }
  return days;
}

/** ========= –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è ========= */
/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±—Ä–æ–Ω—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ—ë –≤ —á–∞—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.
 */
async function finalizeReservation(ctx, state) {
  const tgUser = ctx.from.username ? `@${ctx.from.username}` : `ID: ${ctx.from.id}`;

  let message = `üìÖ *–ù–æ–≤–∞—è –±—Ä–æ–Ω—å —Å—Ç–æ–ª–∏–∫–∞ —Å Telegram* (${tgUser})\n\n`;
  message += `üë§ *–ò–º—è:* ${state.name}\n`;
  message += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* +${state.phone}\n`;
  message += `üè¢ *–ê–¥—Ä–µ—Å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:* ${state.address}\n`;
  message += `üìÜ *–î–∞—Ç–∞:* ${state.date}\n`;
  message += `üë• *–ì–æ—Å—Ç–µ–π:* ${state.guests}\n`;
  message += `‚è∞ *–í—Ä–µ–º—è:* ${state.time}\n`;
  if (state.comment && state.comment.toLowerCase() !== "–Ω–µ—Ç") {
    message += `üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${state.comment}\n`;
  }

  try {
    await ctx.reply(`‚úÖ –í–∞—à–∞ –±—Ä–æ–Ω—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n${message}\n\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`, { parse_mode: "Markdown" });
    await ctx.telegram.sendMessage(reserveGroupId, message, { parse_mode: "Markdown" });

    await pool.query(
      `INSERT INTO reservations (
        tg_username, name, phone, address, date, time, guests, comment, created_at
      ) VALUES ($1,$2,$3,$4,$5,$6,$7,$8,NOW())`,
      [
        ctx.from.username || null,
        state.name,
        state.phone,
        state.address,
        state.date,
        state.time,
        state.guests,
        state.comment || null,
      ]
    );
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –±—Ä–æ–Ω–∏ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –ë–î:", err);
    await ctx.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
  }
}

/** ========= –ì–ª–æ–±–∞–ª—å–Ω—ã–π –≥–∞—Ä–¥ ========= */
// –ü–æ—Å—Ç–∞–≤—å –≠–¢–û —Å–∞–º—ã–º –ø–µ—Ä–≤—ã–º middleware
/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç middleware, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–º–µ—á–∞–µ—Ç –≤—Ö–æ–¥ –≤ –º–∞—Å—Ç–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
function attachReservationGuard(bot) {
  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId || !userReserveStates.has(userId)) {
      return next();
    }

    // 1) –ß—É–∂–æ–π callback => –≤—ã—Ö–æ–¥–∏–º –∏–∑ –±—Ä–æ–Ω–∏ –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    if (ctx.updateType === "callback_query") {
      const data = ctx.callbackQuery?.data || "";
      if (!data.startsWith("reserve_")) {
        endReservation(userId);
        ctx.state = ctx.state || {};
        ctx.state.__reserve_exited = "callback";
        await ctx.answerCbQuery().catch(() => {});
        return next(); // –ø–æ–∑–≤–æ–ª—è–µ–º —á—É–∂–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
      }
      return next(); // –Ω–∞—à reserve_* ‚Äî –æ–±—Ä–∞–±–æ—Ç–∞—é—Ç action-—Ö–µ–Ω–¥–ª–µ—Ä—ã –±—Ä–æ–Ω–∏
    }

    // 2) –õ—é–±–∞—è –∫–æ–º–∞–Ω–¥–∞ => –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤—ã—Ö–æ–¥–∏–º –∏ –¥–∞—ë–º –∫–æ–º–∞–Ω–¥–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è
    if (ctx.message?.text?.startsWith("/")) {
      endReservation(userId);
      ctx.state = ctx.state || {};
      ctx.state.__reserve_exited = "command";
      return next(); // –ù–ï –±–ª–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ —Å—Ä–∞–∑—É
    }

    // 3) –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –æ—Ç–¥–∞—ë–º —à–∞–≥–æ–≤–∏–∫—É
    const handled = await handleReserveStep(ctx);

    if (handled) {
      // –®–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî "—Å—ä–µ–¥–∞–µ–º" –∞–ø–¥–µ–π—Ç, –¥–∞–ª—å—à–µ –Ω–µ –ø—É—Å–∫–∞–µ–º
      return;
    }

    // –®–∞–≥ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—á—É–∂–æ–π —Ç–µ–∫—Å—Ç) ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∞–ª—å—à–µ
    endReservation(userId);
    ctx.state = ctx.state || {};
    ctx.state.__reserve_exited = "text";
    return next();
  });
}


/**
 * –ü–æ–º–µ—á–∞–µ–º –∞–ø–¥–µ–π—Ç –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ –±—Ä–æ–Ω–∏ (–¥–ª—è –ª–æ–≥–≥–µ—Ä–æ–≤).
 * ‚ö†Ô∏è –ë–æ–ª—å—à–µ –ù–ò–ß–ï–ì–û –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ –≤—ã–ø–æ–ª–Ω—è–ª–∏—Å—å —Å—Ä–∞–∑—É.
 */
/**
 * Middleware, —Ñ–∏–∫—Å–∏—Ä—É—é—â–∏–π –≤—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
function markReserveExitForLoggers(bot) {
  bot.use(async (ctx, next) => {
    if (ctx.state?.__reserve_exited) {
      // –¥–ª—è –≤–∞—à–∏—Ö –ª–æ–≥–≥–µ—Ä–æ–≤ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ñ–ª–∞–≥–∏:
      // __reserve_exited: 'command' | 'callback' | 'text'
      // –º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å ctx.state.__suppressReserveLogging = true;
      ctx.state.__suppressReserveLogging = true;
    }
    return next();
  });
}

/** ========= –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ========= */
/**
 * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ callback-–¥–µ–π—Å—Ç–≤–∏—è –∏ –∫–æ–º–∞–Ω–¥—ã –º–∞—Å—Ç–µ—Ä–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 */
function registerReserveHandler(bot) {
  attachReservationGuard(bot);     // –ø–µ—Ä–≤—ã–º
  markReserveExitForLoggers(bot);  // —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ ‚Äî –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É

  // (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∫–æ–º–∞–Ω–¥—ã —è–≤–Ω–æ–≥–æ –≤—ã—Ö–æ–¥–∞
  bot.command(["cancel_reserve", "reserve_exit"], async (ctx) => {
    await cancelReservation(ctx, "–í—ã –≤—ã—à–ª–∏ –∏–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.");
  });

  // –ê–¥—Ä–µ—Å
  bot.action(/^reserve_address_(\d)$/, async (ctx) => {
    const userId = ctx.from.id;
    const state = userReserveStates.get(userId);
    if (!state) return;

    const map = {
      1: "—É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87",
      2: "—É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–∞",
      3: "—É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140",
    };

    state.address = map[ctx.match[1]];
    state.step = "date";
    await ctx.answerCbQuery();
    await ctx.reply(
      "üìÜ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –±—Ä–æ–Ω–∏—Ä—É–µ–º?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:",
      { reply_markup: { inline_keyboard: getNext7DaysKeyboard() } }
    );
    if (userReserveStates.has(userId)) userReserveStates.set(userId, state);
  });

  // –î–∞—Ç–∞
  bot.action(/^reserve_date_(\d{4}-\d{2}-\d{2})$/, async (ctx) => {
    const userId = ctx.from.id;
    const state = userReserveStates.get(userId);
    if (!state) return;

    state.date = ctx.match[1];
    state.step = "guests";
    await ctx.answerCbQuery();
    await ctx.reply("üë• –ù–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–ª–∏–∫?");
    if (userReserveStates.has(userId)) userReserveStates.set(userId, state);
  });
}

module.exports = {
  userReserveStates,
  startReservation,
  handleReserveStep,
  registerReserveHandler,
  attachReservationGuard,
  markReserveExitForLoggers,
};
