// –í–µ—Ä—Å–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ 2.2 ‚Äî OpenRouter (—á–µ—Ä–µ–∑ OpenAI SDK)

const { OpenAI } = require("openai");

const operatorChatUsers = new Map();
const userHistories = new Map();
let menuCache = "";

/** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî OpenRouter –∫–ª–∏–µ–Ω—Ç ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
// –ò—Å–ø–æ–ª—å–∑—É–µ–º AI_API_KEY –∏–∑ .env
const openai = new OpenAI({
  apiKey: process.env.AI_API_KEY,
  baseURL: "https://openrouter.ai/api/v1",
  defaultHeaders: {
    "HTTP-Referer": process.env.PROJECT_PUBLIC_URL || "https://example.com",
    "X-Title": "Ayami Operator Bot",
  },
});

/** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
function isOperatorActive(userId) {
  return Boolean(operatorChatUsers.get(userId));
}

async function exitOperatorFor(ctx, reasonMsg = null) {
  const userId = ctx.from?.id;
  if (!userId || !isOperatorActive(userId)) return;

  operatorChatUsers.delete(userId);
  userHistories.delete(userId);

  if (reasonMsg) {
    try {
      await ctx.reply(reasonMsg, {
        reply_markup: {
          inline_keyboard: [[{ text: "üìã –ú–µ–Ω—é", callback_data: "button_food_clicked" }]],
        },
      });
    } catch {}
  }
}

/** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–ï–†–ê–¢–û–†–ê ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
async function handleOperatorMessage(ctx) {
  const userId = ctx.from.id;
  if (!operatorChatUsers.get(userId)) return;

  const userMessage = ctx.message?.text;
  if (!userMessage) return;

  const chatId = ctx.chat.id;

  try {
    await ctx.telegram.sendChatAction(chatId, "typing");
    await ctx.reply("‚åõÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å...");

    // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –ø–æ–∫–∞ –∂–¥—ë–º –æ—Ç–≤–µ—Ç
    const typingInterval = setInterval(() => {
      ctx.telegram.sendChatAction(chatId, "typing").catch(() => {});
    }, 3000);

    // —Ç–∞–π–º–∞—É—Ç –∏ –æ—Ç–º–µ–Ω–∞
    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 60_000);

    const history = userHistories.get(userId) || [];
    history.push({ role: "user", content: userMessage });

    // —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const systemMsg = {
      role: "system",
      content: `# –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${(() => {
        const now = new Date();
        now.setHours(now.getHours() + 1); // –ú–°–ö + 1 —á–∞—Å
        return now.toLocaleString("ru-RU", {
          timeZone: "Europe/Moscow",
          hour12: false,
        });
      })()}

# –†–æ–ª—å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —è–ø–æ–Ω—Å–∫–æ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ ¬´–ê—è–º–∏¬ª. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –≤–µ–∂–ª–∏–≤–æ –∏ —á—ë—Ç–∫–æ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –º–µ–Ω—é, –ø–æ–º–æ–≥–∞—Ç—å –≤—ã–±—Ä–∞—Ç—å –±–ª—é–¥–∞, –¥–µ–ª–∞—Ç—å –∞–ø—Å–µ–π–ª —Å—Ç—Ä–æ–≥–æ –ø–æ –º–µ–Ω—é –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ.

–ú–µ–Ω—é:
${menuCache}

# –î–∞–Ω–Ω—ã–µ –æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ
–†–µ—Å—Ç–æ—Ä–∞–Ω—ã ¬´–ê—è–º–∏¬ª –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø–æ –∞–¥—Ä–µ—Å–∞–º:
1. —É–ª. –ö—Ä–∞—Å–Ω–∞—è, 140
2. —É–ª. –ü–µ—Ç—Ä–æ–≤–∞, 27–ê
3. —É–ª. –ë–∞—Ä–∞–Ω–æ–≤–∞, 87, –ú–æ–ª–ª "–ú–∞—Ç—Ä–∏—Ü–∞", 3 —ç—Ç–∞–∂

üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:
‚Äî –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫‚Äì–ß–µ—Ç–≤–µ—Ä–≥: 10:00‚Äì22:00
‚Äî –ü—è—Ç–Ω–∏—Ü–∞‚Äì–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: 10:00‚Äì23:00

# –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
- –í–µ–∂–ª–∏–≤—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ —Ç—ë–ø–ª—ã–π
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –≤ –º–µ—Ä—É
- –ë–ª—é–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–º–µ—Ä—É–π

# –¶–µ–ª—å
- –ü–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Å–¥–µ–ª–∞—Ç—å –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä
- –ü–æ–≤—ã—Å–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –º–µ–Ω—é –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–º
- –ï—Å–ª–∏ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å –∑–∞–ø—Ä–æ—Å ‚Äî –æ—Ç–≤–µ—Ç—å: "–£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!"
- –ï—Å–ª–∏ —É –≥–æ—Å—Ç—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫—ç—à–±—ç–∫ 10% –Ω–∞ –∑–∞–∫–∞–∑.
- –ï—Å–ª–∏ –≥–æ—Å—Ç—å –≤—ã–±—Ä–∞–ª –∫–∞–∫–æ–µ-—Ç–æ –±–ª—é–¥–æ, –ø–æ–¥—Å–∫–∞–∂–∏ –∫–∞–∫ –µ–≥–æ –∑–∞–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –º–µ–Ω—é, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!!!!

# –ó–∞–ø—Ä–µ—â–µ–Ω–æ
- –ù–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ –Ω–µ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑—ã
- –ù–µ –≤—ã–¥—É–º—ã–≤–∞—Ç—å –±–ª—é–¥–∞, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–ª–∏ —Ü–µ–Ω—ã
- –ù–µ —Å–æ–±–∏—Ä–∞—Ç—å –∞–¥—Ä–µ—Å–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—ã –∏ —Ç.–ø.
- –ù–µ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑–µ ‚Äî —Ç—ã –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å, –Ω–æ –Ω–µ –æ–±—Å–ª—É–∂–∏–≤–∞–µ—à—å`,
    };

    // –≤—ã–∑–æ–≤ OpenRouter Chat Completions
    const completion = await openai.chat.completions.create(
      {
        model: "openai/gpt-4o-mini", // —á–µ—Ä–µ–∑ OpenRouter
        temperature: 0.5,
        messages: [
          systemMsg,
          ...history.map(m => ({ role: m.role, content: m.content })),
          { role: "user", content: userMessage },
        ],
      },
      { signal: controller.signal }
    );

    clearTimeout(timeout);
    clearInterval(typingInterval);

    const replyText =
      completion.choices?.[0]?.message?.content?.trim() || "‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—É—Å—Ç.";

    history.push({ role: "assistant", content: replyText });
    userHistories.set(userId, history.slice(-10));

    await new Promise((r) => setTimeout(r, 1000));

    await ctx.reply(replyText, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "üìã –ú–µ–Ω—é", callback_data: "button_food_clicked" }],
          [{ text: "‚ùå –í—ã–π—Ç–∏ –∏–∑ –¥–∏–∞–ª–æ–≥–∞", callback_data: "exit_operator_chat" }],
        ],
      },
    });
  } catch (err) {
    try {
      await ctx.telegram.sendChatAction(ctx.chat.id, "cancel");
    } catch {}

    if (err.name === "AbortError") {
      await ctx.reply("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    } else {
      await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${err.message}`);
    }
  }
}

/** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ò –ú–ò–î–õ–í–ê–† ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
function registerOperatorChat(bot) {
  bot.action("exit_operator_chat", async (ctx) => {
    await exitOperatorFor(
      ctx,
      "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /operator, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –Ω–∞—á–∞—Ç—å."
    );
    await ctx.answerCbQuery().catch(() => {});
  });

  bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;

    if (!userId || !isOperatorActive(userId)) {
      return next();
    }

    if (ctx.updateType === "callback_query") {
      if (ctx.callbackQuery?.data === "exit_operator_chat") {
        return;
      }
      await exitOperatorFor(
        ctx,
        "‚ÑπÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–µ —á–∞—Ç–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –≤—ã–ø–æ–ª–Ω—è—é –≤–∞—à –≤—ã–±–æ—Ä."
      );
      return next();
    }

    const text = ctx.message?.text || "";
    if (text.startsWith("/")) {
      if (text.trim() !== "/operator") {
        await exitOperatorFor(
          ctx,
          "‚ÑπÔ∏è –í—ã –≤–≤–µ–ª–∏ –∫–æ–º–∞–Ω–¥—É. –î–∏–∞–ª–æ–≥ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç ‚Äî –≤—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É."
        );
      }
      return next();
    }

    await handleOperatorMessage(ctx);
  });
}

/** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî –í–ö–õ–Æ–ß–ï–ù–ò–ï/–î–ê–ù–ù–´–ï ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
function startOperatorChat(userId) {
  operatorChatUsers.set(userId, true);
  userHistories.set(userId, []);
}

function setMenuCache(menuText) {
  menuCache = menuText;
}

module.exports = {
  registerOperatorChat,
  startOperatorChat,
  setMenuCache,
  userHistories,
  operatorChatUsers,
  handleOperatorMessage,
};
